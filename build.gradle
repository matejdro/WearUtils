apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

buildscript {
    ext.setDefaultVersion = {name, defaultValue ->
        if (!project.hasProperty("versions")) {
            ext.versions = [:]
        }

        if (!versions.containsKey(name)) {
            versions.put(name, defaultValue)
        }
    }

    setDefaultVersion("kotlin", "1.2.30")
    setDefaultVersion("supportLib", "27.0.0")
    setDefaultVersion("supportWearable", "2.2.0")
    setDefaultVersion("playServices", "11.8.0")
    setDefaultVersion("junit", "4.12")
    setDefaultVersion("robolectric", "3.7.1")
    setDefaultVersion("archComponents", "1.1.0")
    setDefaultVersion("coroutines", "0.22.4")

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api "com.android.support:appcompat-v7:${versions.supportLib}"
    api "com.android.support:recyclerview-v7:${versions.supportLib}"
    api "com.android.support:preference-v7:${versions.supportLib}"

    implementation "com.android.support:wear:${versions.supportLib}"

    compileOnly "com.google.android.support:wearable:${versions.supportWearable}"
    implementation "com.google.android.wearable:wearable:${versions.supportWearable}"

    api "android.arch.lifecycle:extensions:${versions.archComponents}"
    api "android.arch.lifecycle:runtime:${versions.archComponents}"

    implementation "com.google.android.gms:play-services-wearable:${versions.playServices}"
    implementation "com.google.android.gms:play-services-location:${versions.playServices}"

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "junit:junit:${versions.junit}"
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            // Force all of the primary support libraries to use the same version.
            if (details.requested.group == 'com.android.support'
                    && details.requested.name != 'multidex'
                    && details.requested.name != 'multidex-instrumentation') {
                details.useVersion versions.supportLib
            }
        }
    }
}


kotlin {
    experimental {
        coroutines "enable"
    }
}

def getPropertyOrDefault(property, defaultValue) {
    if (!project.hasProperty(property)) {
        return defaultValue
    }

    return project.properties.get(property)
}