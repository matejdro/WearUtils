apply plugin: 'com.android.library'

ext {
    defaultSupportLibVersion = "27.0.2"
    defaultSupportWearableVersion = "2.2.0"
    defaultArchComponentsVersion = "1.1.0"
    defaultPlayServicesVersion = "11.8.0"
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    // All dependencies are defined as compileOnly to not pollute apps that use this with all dependencies.
    // Apps must redefine dependencies on their own

    compileOnly "com.android.support:appcompat-v7:${getPropertyOrDefault("supportLibVersion", defaultSupportLibVersion)}"
    compileOnly "com.android.support:recyclerview-v7:${getPropertyOrDefault("supportLibVersion", defaultSupportLibVersion)}"
    compileOnly "com.android.support:preference-v7:${getPropertyOrDefault("supportLibVersion", defaultSupportLibVersion)}"

    compileOnly "com.android.support:wear:${getPropertyOrDefault("supportLibVersion", defaultSupportLibVersion)}"

    compileOnly "com.google.android.support:wearable:${getPropertyOrDefault("supportWearableVersion", defaultSupportWearableVersion)}"
    compileOnly "com.google.android.wearable:wearable:${getPropertyOrDefault("supportWearableVersion", defaultSupportWearableVersion)}"

    compileOnly "android.arch.lifecycle:extensions:${getPropertyOrDefault("archComponentsVersion", defaultArchComponentsVersion)}"
    compileOnly "android.arch.lifecycle:runtime:${getPropertyOrDefault("archComponentsVersion", defaultArchComponentsVersion)}"

    compileOnly "com.google.android.gms:play-services-wearable:${getPropertyOrDefault("playServicesVersion", defaultPlayServicesVersion)}"
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            // Force all of the primary support libraries to use the same version.
            if (details.requested.group == 'com.android.support'
                    && details.requested.name != 'multidex'
                    && details.requested.name != 'multidex-instrumentation') {
                details.useVersion getPropertyOrDefault("supportLibVersion", defaultSupportLibVersion)
            }
        }
    }
}

def getPropertyOrDefault(property, defaultValue) {
    if (!project.hasProperty(property)) {
        return defaultValue
    }

    return project.properties.get(property)
}

repositories {
    mavenCentral()
}
